package de.firsdata.ipg;

import java.util.Properties;

import org.apache.kafka.common.serialization.Serde;
import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.streams.KafkaStreams;
import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.StreamsConfig;
import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.Produced;
import org.apache.kafka.streams.kstream.ValueMapper;

public class StreamsDemo {
	
	public static void main(){
			//create properties
		String bootstrapServer = "127.0.0.1:9092";
		String appIdConfig = "demo-kafka-streams";
		String topicId = "ipg_notification_log";
		String outputTopicId = "ipg_notification_external";
		
		Properties properties = new Properties();
		properties.setProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServer);
		properties.setProperty(StreamsConfig.APPLICATION_ID_CONFIG, appIdConfig);
		properties.setProperty(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.StringSerde.class.getName());
		properties.setProperty(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.StringSerde.class.getName());
		properties.setProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServer);
		properties.setProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServer);
		
		// create topology
		StreamsBuilder streamsBuilder = new StreamsBuilder();
		
		//input topic
		KStream<String, String> inputTopic = streamsBuilder.stream(topicId);
		KStream<String, Integer> filteredStream = inputTopic.mapValues(new ValueMapper<String,Integer>() {

			@Override
			public Integer apply(String arg0) {
				// TODO Auto-generated method stub
				return checkString(arg0);
			}
		});
		filteredStream.to(outputTopicId, Produced.with(Serdes.String(),Serdes.Integer()));
		
		//build topology
		KafkaStreams kafkaStreams = new KafkaStreams(streamsBuilder.build(), properties);
		
		//start streams
		kafkaStreams.start();
	}
	
	public static Integer checkString(String v){
		return v.length();
	}
}
